spring:
  application:
    name: alert-notification
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP:localhost:9092}
    consumer:
      group-id: alert-notif-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: latest
      enable-auto-commit: false
      max-poll-records: 500
      fetch-max-wait: 500ms
      buffer-memory: 33554432
      request-timeout-ms: 3000
      delivery-timeout-ms: 120000
  data:
    mongodb:
      uri: ${MONGO_URI:mongodb://localhost:27017/alertsdb}
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      timeout: 100ms
      lettuce:
        pool:
          max-active: 10
          max-idle: 8
          min-idle: 2
server:
  port: ${SERVER_PORT:8083}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,circuitbreakers,circuitbreakerevents
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        fraud.detection.processing.time: true
app:
  kafka:
    topics:
      input: ${APP_KAFKA_TOPIC_ALERTS:fraud.alerts}

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      redisOperations:
        sliding-window-type: TIME_BASED
        sliding-window-size: 10
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 100ms
        permitted-number-of-calls-in-half-open-state: 5
        wait-duration-in-open-state: 15s

      mongoOperations:
        sliding-window-type: COUNT_BASED
        sliding-window-size: 50
        failure-rate-threshold: 40
        slow-call-rate-threshold: 40
        slow-call-duration-threshold: 200ms
        permitted-number-of-calls-in-half-open-state: 10
        wait-duration-in-open-state: 30s

  retry:
    instances:
      mongoRetry:
        max-attempts: 3
        wait-duration: 100ms
        exponential-backoff-multiplier: 2.0
        retry-exceptions:
          - org.springframework.dao.TransientDataAccessException
          - com.mongodb.MongoTimeoutException

  bulkhead:
    instances:
      redisBulkhead:
        max-concurrent-calls: 20
        max-wait-duration: 50ms

      mongoBulkhead:
        max-concurrent-calls: 15
        max-wait-duration: 100ms

  timelimiter:
    instances:
      redisTimeLimiter:
        timeout-duration: 100ms
        cancel-running-future: true

      mongoTimeLimiter:
        timeout-duration: 200ms
        cancel-running-future: true


logging:
  level:
    com.codewithsai.alert.notification: INFO
    org.springframework.kafka: INFO
    org.apache.kafka: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{correlationId:-}] %logger{36} - %msg%n"
